Gitleaks is a tool for scanning both local & remote repositories for any kind of sensitive info. 
It is fast, easy to use and very configurable.

To run it on a remote repository:
gitleaks --repo=https://github.com/path/to/your/repo
To run it locally:
gitleaks --repo-path=path/to/your/repo

To see more examples, visit the wiki page. For our purposes, we want to run it on our local repository before every push. 
Since gitleaks implements pretty consistent return codes (0 means no leaks and 1 means leaks present) this is actually very easy to do; 
rather than git push, we can just do:

gitleaks --repo-path=path/to/your/repo -v && git push

For those of you who donâ€™t know bash, && lets you run a command if the previous command completed correctly. 
In our example here, git push will run only if there are no leaks found. We also put -v in there, 
to be able to see more information about any present leaks.

This would work, however it is not optimal, since we want our command to be baked into git push. 
We should not have change our workflow. Therefore, a better option is creating a wrapper function around the git command:

vi ~/.bash_profile

git()
{
  if [ $# -gt 0 ] && [ "$1" == "push" ] ; then
     shift
     command gitleaks --repo-path=. -v && git exitloop "$@"
  elif [ $# -gt 0 ] && [ "$1" == "exitloop" ] ; then
     shift
     command git push "$@"
  else
     command git "$@"
  fi
}

open ~/.gitconfig
alias gl="gitleaks --repo-path=path/to/your/repo -v && git push"

Error: expansion of alias 'gl' failed; 'gitleaks' is not a git command
The error occured because gitleaks is an external OS command.

solution: Adding ! infront of gitleaks 
gl = !gitleaks --repo-path=/Users/katherinekruk/Desktop/webhook-test -v && git
